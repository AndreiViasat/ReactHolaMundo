{"version":3,"sources":["serviceWorker.js","PrimerComponente.js","CounterApp.js","index.js"],"names":["Boolean","window","location","hostname","match","PrimerComponente","saludo","valor01","prototypes","PropTypes","string","isRequired","defaultProps","CounterApp","value","useState","counter","setCounter","onClick","e","number","divApp","document","querySelector","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCfAC,EAAmB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAmD,IAA3CC,eAA2C,MAAjC,2BAAiC,EAE3E,OACI,oCACI,4BAAKD,GACL,2BAAIC,GACJ,+CAKZF,EAAiBG,WAAa,CAC1BF,OAAQG,IAAUC,OAAOC,YAI7BN,EAAiBO,aAAe,CAC5BL,QAAS,qBAGEF,I,OCpBTQ,EAAa,SAAC,GAAc,EAAZC,MAAa,IAAD,EAEAC,mBAAS,GAFT,mBAEvBC,EAFuB,KAEdC,EAFc,KAQ9B,OACI,oCACI,qDACA,2BAAID,GACJ,4BAAQE,QAPE,SAACC,GACfF,EAAWD,EAAU,KAMjB,cAKZH,EAAWL,WAAa,CACpBM,MAAOL,IAAUW,OAAOT,YAIbE,QCjBTQ,EAASC,SAASC,cAAc,QAEtCC,IAASC,OAAO,kBAAC,EAAD,CAAYX,MAAO,MAASO,GHyHtC,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.27d33368.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst PrimerComponente = ({ saludo, valor01 = 'soy un valor por defecto' }) => {\r\n\r\n    return (\r\n        <>\r\n            <h1>{saludo}</h1>\r\n            <p>{valor01}</p>\r\n            <p>Soy un espacio</p>\r\n        </>\r\n    );\r\n}\r\n\r\nPrimerComponente.prototypes = {\r\n    saludo: PropTypes.string.isRequired,  //Obliga a recibir esta propiedad\r\n}\r\n\r\n// Metodo para valores por defecto\r\nPrimerComponente.defaultProps = {\r\n    valor01: 'Valor por defecto'\r\n}\r\n\r\nexport default PrimerComponente;","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst CounterApp = ({ value }) => {\r\n\r\n    const [counter, setCounter] = useState(0); //Devuelve un arreglo con dos campos\r\n\r\n    //handleAdd\r\n    const handleAdd = (e) => {\r\n        setCounter(counter + 1);\r\n    }\r\n    return (\r\n        <>\r\n            <h1>Valor del componente:</h1>\r\n            <p>{counter}</p>\r\n            <button onClick={handleAdd}>sumar +1</button>\r\n        </>\r\n    );\r\n}\r\n\r\nCounterApp.prototypes = {\r\n    value: PropTypes.number.isRequired,  //Obliga a recibir esta propiedad\r\n}\r\n\r\n\r\nexport default CounterApp;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport PrimerComponente from \"./PrimerComponente\";\nimport CounterApp from \"./CounterApp\";\n\n//const saludo = <h1> Hola Soy Andres</h1>\nconst divApp = document.querySelector('#app')\n\nReactDOM.render(<CounterApp value={123} />, divApp)\n\n//ReactDOM.render(<GifExpertApp />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}